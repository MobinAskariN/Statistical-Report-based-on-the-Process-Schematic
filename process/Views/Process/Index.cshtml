@{
    ViewData["Title"] = "Process";
    List<Element> elements = ViewBag.elements;
    List<Flow> flows = ViewBag.flows;
    PageInfo pageInfo = ViewBag.pageInfo;
}
@using System.Web

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        .outer-area {
            width: 1300px;
            height: 500px;
            overflow: auto;
            border: 1px solid #ccc;
            padding: 10px;
            box-sizing: border-box;
        }

        .inner-area {
            width: @(pageInfo.p_width + 10)px;
            height: @(pageInfo.p_height + 30)px;
            background-color: #f0f0f0;
        }

        .event {
            stroke: black;
            stroke-width: 1;
        }

        .rectangle {
            stroke: black;
            stroke-width: 1;
        }

        .gateway {
            stroke: black;
            stroke-width: 1;
        }

        .lane {
            stroke: black;
            stroke-width: 1;
            fill: #edfcf8;
        }
    </style>
</head>
<body>
    <h2>Process</h2>
    <div class="outer-area">
        <div class="inner-area">
            <svg width="@(pageInfo.p_width)" height="@(pageInfo.p_height)">
                <!-- Vertical Text -->
                <text x="20" y="@(pageInfo.p_height / 2)" fill="black" writing-mode="vertical-rl" text-anchor="middle" style="font-size: 20px;">
                    @pageInfo.p_name
                </text>

                @{

                    // Render lanes first
                    foreach (Element element in elements)
                    {
                        if (element.ElementType == "Lane")
                        {
                            @Html.Raw($"<rect x='{element.BOU_X}' y='{element.BOU_Y + 15}'" +
                                 $"width='{element.BOU_WIDTH}' height='{element.BOU_HEIGHT}' class='lane' />")

                            @Html.Raw($"<text x='{element.BOU_X + 30}' y='{element.BOU_Y + 15 + element.BOU_HEIGHT / 2}'" +
                                 $" fill='black' writing-mode='vertical-rl' text-anchor='middle' style='font-size: 20px;'>")
                            @Html.Raw($"{element.EName}")
                            @Html.Raw("</text>")
                        }
                    }

                    // Render events (circles) after lanes
                    foreach (Element element in elements)
                    {
                        if (element.ElementType == "Event")
                        {
                            string color;
                            if (element.EType == "START")
                                color = "#4ab599";
                            else
                                color = "#d15878";

                            @Html.Raw($"<circle cx='{element.BOU_X}' cy='{element.BOU_Y+15}'" +
                                 $" r='{element.BOU_WIDTH / 2}' class='event' fill='{color}' />")
                        }
                        else if (element.ElementType == "Gateway")
                        {
                            @Html.Raw($@"
                                <polygon points='{element.BOU_X + element.BOU_WIDTH / 2},{element.BOU_Y}
                                    {element.BOU_X + element.BOU_WIDTH},{element.BOU_Y + element.BOU_HEIGHT / 2}
                                    {element.BOU_X + element.BOU_WIDTH / 2},{element.BOU_Y + element.BOU_HEIGHT}
                                    {element.BOU_X},{element.BOU_Y + element.BOU_HEIGHT / 2}'
                                    stroke='black' stroke-width='3' class='gateway' fill='none'/>")

                        }
                    }

                }
            </svg>
        </div>
    </div>
</body>
</html>
